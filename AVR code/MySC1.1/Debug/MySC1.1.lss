
MySC1.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000280  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00800060  00000280  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  008000de  008000de  00000392  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004e2  00000000  00000000  00000462  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000328  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000308  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000198  00000000  00000000  00000f74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c8  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003d9  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000017ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3d       	cpi	r26, 0xDE	; 222
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae ed       	ldi	r26, 0xDE	; 222
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3f       	cpi	r26, 0xFA	; 250
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 23 01 	call	0x246	; 0x246 <main>
  8a:	0c 94 3e 01 	jmp	0x27c	; 0x27c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pwm_init>:
int flag = 0, i = 0, k = 0, max = 0;
int temp_array[10];

void pwm_init()
{
	DDRD |= _BV(PD4);						//Setting output
  92:	8c 9a       	sbi	0x11, 4	; 17
	TCCR1A |= _BV(COM1A1) | _BV(COM1B1);	//16 bit T/C
  94:	8f b5       	in	r24, 0x2f	; 47
  96:	80 6a       	ori	r24, 0xA0	; 160
  98:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= _BV(WGM13) | _BV(CS11);		//Phase and Frequency correct mode, prescaler 8
  9a:	8e b5       	in	r24, 0x2e	; 46
  9c:	82 61       	ori	r24, 0x12	; 18
  9e:	8e bd       	out	0x2e, r24	; 46
  a0:	08 95       	ret

000000a2 <playMusic>:
	flag = 1;
}


void playMusic()					//8-bit tempo value
{
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	ce 57       	subi	r28, 0x7E	; 126
  ac:	d1 09       	sbc	r29, r1
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	f8 94       	cli
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	cd bf       	out	0x3d, r28	; 61
				E F# F# G F# E EEE




				*/int song[] = {Fis4, E4, G4, E4, Fis4, D4,E4,D4,
  b8:	8e e7       	ldi	r24, 0x7E	; 126
  ba:	e0 e6       	ldi	r30, 0x60	; 96
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	de 01       	movw	r26, r28
  c0:	11 96       	adiw	r26, 0x01	; 1
  c2:	01 90       	ld	r0, Z+
  c4:	0d 92       	st	X+, r0
  c6:	8a 95       	dec	r24
  c8:	e1 f7       	brne	.-8      	; 0xc2 <playMusic+0x20>
			GG G F#EF#
			BB
			BB
			BBABB
		};*/
	ICR1 = song[i];
  ca:	e0 91 e2 00 	lds	r30, 0x00E2
  ce:	f0 91 e3 00 	lds	r31, 0x00E3
  d2:	ee 0f       	add	r30, r30
  d4:	ff 1f       	adc	r31, r31
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	8c 0f       	add	r24, r28
  dc:	9d 1f       	adc	r25, r29
  de:	e8 0f       	add	r30, r24
  e0:	f9 1f       	adc	r31, r25
  e2:	80 81       	ld	r24, Z
  e4:	91 81       	ldd	r25, Z+1	; 0x01
  e6:	97 bd       	out	0x27, r25	; 39
  e8:	86 bd       	out	0x26, r24	; 38
	i++;
  ea:	80 91 e2 00 	lds	r24, 0x00E2
  ee:	90 91 e3 00 	lds	r25, 0x00E3
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	90 93 e3 00 	sts	0x00E3, r25
  f8:	80 93 e2 00 	sts	0x00E2, r24
}
  fc:	c2 58       	subi	r28, 0x82	; 130
  fe:	df 4f       	sbci	r29, 0xFF	; 255
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	f8 94       	cli
 104:	de bf       	out	0x3e, r29	; 62
 106:	0f be       	out	0x3f, r0	; 63
 108:	cd bf       	out	0x3d, r28	; 61
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <stopMusic>:

void stopMusic()					//stop data trans. with Z
{
		flag = 0;
 110:	10 92 e5 00 	sts	0x00E5, r1
 114:	10 92 e4 00 	sts	0x00E4, r1
		ICR1 = 0;
 118:	17 bc       	out	0x27, r1	; 39
 11a:	16 bc       	out	0x26, r1	; 38
		i = 0;
 11c:	10 92 e3 00 	sts	0x00E3, r1
 120:	10 92 e2 00 	sts	0x00E2, r1
 124:	08 95       	ret

00000126 <__vector_13>:
}

ISR(USART_RXC_vect)
{
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	5f 93       	push	r21
 138:	6f 93       	push	r22
 13a:	7f 93       	push	r23
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
	int tempo = (int)USART_Receive();
 148:	0e 94 3a 01 	call	0x274	; 0x274 <USART_Receive>
 14c:	90 e0       	ldi	r25, 0x00	; 0
	if(k<8)
 14e:	20 91 e0 00 	lds	r18, 0x00E0
 152:	30 91 e1 00 	lds	r19, 0x00E1
 156:	28 30       	cpi	r18, 0x08	; 8
 158:	31 05       	cpc	r19, r1
 15a:	74 f4       	brge	.+28     	; 0x178 <__vector_13+0x52>
	{
		temp_array[k] = tempo;
 15c:	f9 01       	movw	r30, r18
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	ea 51       	subi	r30, 0x1A	; 26
 164:	ff 4f       	sbci	r31, 0xFF	; 255
 166:	91 83       	std	Z+1, r25	; 0x01
 168:	80 83       	st	Z, r24
		k++;
 16a:	2f 5f       	subi	r18, 0xFF	; 255
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	30 93 e1 00 	sts	0x00E1, r19
 172:	20 93 e0 00 	sts	0x00E0, r18
 176:	17 c0       	rjmp	.+46     	; 0x1a6 <__vector_13+0x80>
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	e6 ef       	ldi	r30, 0xF6	; 246
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	66 ee       	ldi	r22, 0xE6	; 230
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	32 91       	ld	r19, -Z
 186:	22 91       	ld	r18, -Z
 188:	42 17       	cp	r20, r18
 18a:	53 07       	cpc	r21, r19
 18c:	0c f4       	brge	.+2      	; 0x190 <__vector_13+0x6a>
 18e:	a9 01       	movw	r20, r18
	}
	else
	{
		max=0;
		for(k=7;k>=0;k--)
 190:	e6 17       	cp	r30, r22
 192:	f7 07       	cpc	r31, r23
 194:	b9 f7       	brne	.-18     	; 0x184 <__vector_13+0x5e>
 196:	50 93 df 00 	sts	0x00DF, r21
 19a:	40 93 de 00 	sts	0x00DE, r20
			if(temp_array[k]>max)
			{
				max = temp_array[k];
			}
		}
		k=0;
 19e:	10 92 e1 00 	sts	0x00E1, r1
 1a2:	10 92 e0 00 	sts	0x00E0, r1
	}
	if(tempo == 201)
 1a6:	89 3c       	cpi	r24, 0xC9	; 201
 1a8:	91 05       	cpc	r25, r1
 1aa:	39 f4       	brne	.+14     	; 0x1ba <__vector_13+0x94>
}


void startMusic()							//start data trans. with Z
{
	flag = 1;
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	90 93 e5 00 	sts	0x00E5, r25
 1b4:	80 93 e4 00 	sts	0x00E4, r24
 1b8:	0b c0       	rjmp	.+22     	; 0x1d0 <__vector_13+0xaa>
		}
		k=0;
	}
	if(tempo == 201)
		startMusic();
	else if(tempo == 200)
 1ba:	88 3c       	cpi	r24, 0xC8	; 200
 1bc:	91 05       	cpc	r25, r1
 1be:	11 f4       	brne	.+4      	; 0x1c4 <__vector_13+0x9e>
		stopMusic();
 1c0:	0e 94 88 00 	call	0x110	; 0x110 <stopMusic>
	if(flag)
 1c4:	80 91 e4 00 	lds	r24, 0x00E4
 1c8:	90 91 e5 00 	lds	r25, 0x00E5
 1cc:	89 2b       	or	r24, r25
 1ce:	51 f1       	breq	.+84     	; 0x224 <__vector_13+0xfe>
	{
		if(i==62)
 1d0:	80 91 e2 00 	lds	r24, 0x00E2
 1d4:	90 91 e3 00 	lds	r25, 0x00E3
 1d8:	ce 97       	sbiw	r24, 0x3e	; 62
 1da:	21 f4       	brne	.+8      	; 0x1e4 <__vector_13+0xbe>
			i=0;
 1dc:	10 92 e3 00 	sts	0x00E3, r1
 1e0:	10 92 e2 00 	sts	0x00E2, r1
		playMusic();
 1e4:	0e 94 51 00 	call	0xa2	; 0xa2 <playMusic>
		for(int j=130;j>max;j--)
 1e8:	80 91 de 00 	lds	r24, 0x00DE
 1ec:	90 91 df 00 	lds	r25, 0x00DF
 1f0:	82 38       	cpi	r24, 0x82	; 130
 1f2:	91 05       	cpc	r25, r1
 1f4:	ac f4       	brge	.+42     	; 0x220 <__vector_13+0xfa>
 1f6:	82 e8       	ldi	r24, 0x82	; 130
 1f8:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	ef e1       	ldi	r30, 0x1F	; 31
 1fc:	fe e4       	ldi	r31, 0x4E	; 78
 1fe:	31 97       	sbiw	r30, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <__vector_13+0xd8>
 202:	00 c0       	rjmp	.+0      	; 0x204 <__vector_13+0xde>
 204:	00 00       	nop
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	20 91 de 00 	lds	r18, 0x00DE
 20c:	30 91 df 00 	lds	r19, 0x00DF
 210:	28 17       	cp	r18, r24
 212:	39 07       	cpc	r19, r25
 214:	94 f3       	brlt	.-28     	; 0x1fa <__vector_13+0xd4>
 216:	04 c0       	rjmp	.+8      	; 0x220 <__vector_13+0xfa>
			
		}
		while(UCSRA & (1<<RXC))
		{
			unsigned char dummy;
			if(UDR!=200)
 218:	8c b1       	in	r24, 0x0c	; 12
 21a:	88 3c       	cpi	r24, 0xC8	; 200
 21c:	09 f0       	breq	.+2      	; 0x220 <__vector_13+0xfa>
			dummy = UDR;
 21e:	8c b1       	in	r24, 0x0c	; 12
		for(int j=130;j>max;j--)
		{
			_delay_ms(10);
			
		}
		while(UCSRA & (1<<RXC))
 220:	5f 99       	sbic	0x0b, 7	; 11
 222:	fa cf       	rjmp	.-12     	; 0x218 <__vector_13+0xf2>
		//USART_Transmitchar('202');
		//ICR1 = 0;
	}
	//USART_TransmitNumber(max);
	//USART_Transmitchar(0x0d);
}
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	7f 91       	pop	r23
 232:	6f 91       	pop	r22
 234:	5f 91       	pop	r21
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <main>:

void main(void)
{
	sei();
 246:	78 94       	sei
	pwm_init();
 248:	0e 94 49 00 	call	0x92	; 0x92 <pwm_init>
	USART_Init(12);
 24c:	8c e0       	ldi	r24, 0x0C	; 12
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 31 01 	call	0x262	; 0x262 <USART_Init>
	USART_InterruptEnable();
 254:	0e 94 38 01 	call	0x270	; 0x270 <USART_InterruptEnable>
	OCR1B = 80;
 258:	80 e5       	ldi	r24, 0x50	; 80
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	99 bd       	out	0x29, r25	; 41
 25e:	88 bd       	out	0x28, r24	; 40
 260:	ff cf       	rjmp	.-2      	; 0x260 <main+0x1a>

00000262 <USART_Init>:
void USART_Init( unsigned int baud )
{
	/* Set baud rate */
	//unsigned int num;
	//num=((F_CPU)/(16*baud))-1;
	UBRRH = (unsigned char)(baud>>8);
 262:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baud;
 264:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN); //|(1<<RXCIE);
 266:	88 e1       	ldi	r24, 0x18	; 24
 268:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
 26a:	8e e8       	ldi	r24, 0x8E	; 142
 26c:	80 bd       	out	0x20, r24	; 32
 26e:	08 95       	ret

00000270 <USART_InterruptEnable>:
}

void USART_InterruptEnable()
{
	UCSRB|=(1<<RXCIE);
 270:	57 9a       	sbi	0x0a, 7	; 10
 272:	08 95       	ret

00000274 <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) )
 274:	5f 9b       	sbis	0x0b, 7	; 11
 276:	fe cf       	rjmp	.-4      	; 0x274 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR;
 278:	8c b1       	in	r24, 0x0c	; 12
}
 27a:	08 95       	ret

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
